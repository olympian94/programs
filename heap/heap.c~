#include<stdio.h>
#include<stdlib.h>

typedef struct bin_heap
{
	int *arr;
	int heapsize;
	int len;
} binheap;

binheap *createHeap(int size)
{
	binheap *_heap=(binheap*)malloc(sizeof(binheap));
	_heap->arr = (int*)malloc(size*sizeof(int));
	_heap->len=size;
	_heap->heapsize=0;
	return _heap;
}

void maxheapify(binheap *A, int i)
{
	int l,r,largest;
	l=2*i+1;
	r=2*i+2;
	if(l<=A->heapsize && A->arr[l] > A->arr[i])
		largest = l;
	else
		largest = i;
	if(r<=A->heapsize && A->arr[r]>A->arr[largest])
		largest = r;
	if( largest!=i )
	{
		int temp=A->arr[i];	
		A->arr[i]=A->arr[largest];
		A->arr[largest]=temp;
		maxheapify(A,largest);		
	}
}

void buildmaxheap(binheap *A)
{
	A->heapsize = A->len-1;
	int j;
	for(j=(A->len)/2; j>=0; j--)
		maxheapify(A,j);
}

void heapsort(binheap *A)
{
	buildmaxheap(A);
	int i, temp;
	for(i=A->len-1; i>=1; i--)
	{
		temp=A->arr[i];
		A->arr[i]=A->arr[0];
		A->arr[0]=temp;
		A->heapsize--;
		maxheapify(A,0);
	}
}

int heapMaximum(binheap *A)
{
	return A->arr[0];
}

int HeapExtractMax(binheap *A)
{
	if(A->heapsize<1)
		printf("\nHeap Underflow");
	int max=A->arr[0];
	A->arr[0]=A->arr[A->heapsize]; //heapsize initially set to len-1
	A->heapsize--;
	maxheapify(A,0);
	return max;
}

int main()
{
	int n, j;
	scanf("%d",&n);
	binheap *test_heap=createHeap(n);
	for(j=0; j<n; j++)
		scanf("%d",(test_heap->arr)+j);
//	buildmaxheap(test_heap);
	heapsort(test_heap);
	for(j=0, printf("\n"); j<n; j++)
		printf("%d ",test_heap->arr[j]);
	printf("\n");
	free(test_heap->arr);	
	free(test_heap);
	return 0;
}
